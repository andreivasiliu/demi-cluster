- hosts: kubes
  gather_facts: no
  become: yes

  handlers:
  - name: restart containerd
    service:
      name: containerd
      state: restarted

  - name: restart dnsmasq
    service:
      name: dnsmasq
      state: restarted

  - name: daemon-reload
    systemd:
      daemon_reload: yes

  - name: restart kubelet
    service:
      name: kubelet
      state: restarted

  - name: restart kube-proxy
    service:
      name: kube-proxy
      state: restarted

  - name: restart demikube-dns
    service:
      name: demikube-dns
      state: restarted

  - name: run ifup eth1
    command: env IFACE=eth1 /etc/network/if-up.d/podnet

  tasks:
  # Route to the pod subnet of other kube hosts
  - name: create pod net routes configuration
    copy:
      dest: /etc/network/if-up.d/podnet
      content: |
        #!/bin/sh -e
        if [ "$IFACE" = "eth1" ]; then
        {% for host in groups.kubes %}
        {% if host != inventory_hostname %}
            ip route add {{ hostvars[host].pod_net }} via {{ hostvars[host].guest_ip }}
        {% endif %}
        {% endfor %}
        fi
      mode: "0755"
    notify: run ifup eth1

  # Container Network Interface plugins for containerd.
  - name: install cni plugins
    package:
      name: containernetworking-plugins
      state: present

  - name: create /etc/cni/net.d directory
    file:
      path: /etc/cni/net.d
      state: directory

  - name: create cni bridge configuration
    copy:
      dest: /etc/cni/net.d/10-bridge.conf
      content: |
        {
          "cniVersion": "0.4.0",
          "name": "bridge",
          "type": "bridge",
          "bridge": "cnio0",
          "isGateway": true,
          "ipMasq": true,
          "ipam": {
            "type": "host-local",
            "ranges": [
              [{"subnet": "{{ pod_net }}"}]
            ],
            "routes": [{"dst": "0.0.0.0/0"}]
          }
        }

  - name: create cni loopback configuration
    copy:
      dest: /etc/cni/net.d/99-loopback.conf
      content: |
        {
          "cniVersion": "0.4.0",
          "name": "lo",
          "type": "loopback"
        }

  # Docker, except without all the docker.
  - name: install containerd
    package:
      name: containerd
      state: present

  # kubeadm refuses to start with swap.
  - name: disable swap in fstab
    lineinfile:
      path: /etc/fstab
      regexp: "^([^#].*?\\sswap\\s+sw\\s+.*)$"
      state: absent
    register: swap_disabled

  - name: run swapoff
    command: swapoff -a
    when: swap_disabled is changed

  # Necessary for inter-pod networking.
  - name: enable ip_forward
    sysctl:
      name: net.ipv4.ip_forward
      value: '1'

  - name: enable br_netfilter
    modprobe:
      name: br_netfilter
      state: present
  
  - name: enable br_netfilter in modules-load.d
    lineinfile:
      path: /etc/modules-load.d/modules.conf
      line: br_netfilter

  - name: create kubelet server certificate
    include_tasks: lan_ssl_sign.yaml
    vars:
      cert_cn: "{{ inventory_hostname }}"
      cert_filename: kube_kubelet_server
      cert_orgname: kubernetes

  - name: create system:node certificate
    include_tasks: lan_ssl_sign.yaml
    vars:
      cert_cn: "system:node:{{ inventory_hostname }}"
      cert_filename: kube_kubelet
      cert_orgname: system:nodes

  - name: create system:kube-proxy certificate
    include_tasks: lan_ssl_sign.yaml
    vars:
      cert_cn: "system:kube-proxy"
      cert_filename: kube_proxy
      cert_orgname: system:node-proxier

  - name: create worker:kube-dns certificate
    include_tasks: lan_ssl_sign.yaml
    vars:
      cert_cn: "system:demikube-dns"
      cert_filename: demikube_dns
      cert_orgname: system:kube-dns

  - name: create kubelet kubeconfig
    copy:
      dest: /var/demi/k8s/kubelet.kubeconfig
      content: |
        apiVersion: v1
        clusters:
        - cluster:
            certificate-authority: /var/demi/ssl/ssl.metal.root_ca_bundle.crt
            server: "https://{{ inventory_hostname }}:6443"
          name: demikube
        contexts:
        - context:
            cluster: demikube
            user: "system:node:{{ inventory_hostname }}"
          name: default
        current-context: default
        kind: Config
        preferences: {}
        users:
        - name: "system:node:{{ inventory_hostname }}"
          user:
            client-certificate: /var/demi/ssl/ssl.kube_kubelet.crt
            client-key: /var/demi/ssl/ssl.kube_kubelet.pem
    notify: restart kubelet

  - name: create kubelet configuration
    copy:
      dest: /var/demi/k8s/kubelet.yaml
      content: |
        kind: KubeletConfiguration
        apiVersion: kubelet.config.k8s.io/v1beta1
        authentication:
          x509:
            clientCAFile: /var/demi/ssl/ssl.metal.root_ca_bundle.crt
        authorization:
          mode: Webhook
        clusterDomain: "cluster.local"
        clusterDNS:
          - "{{ guest_ip }}"
        podCIDR: "{{ pod_net }}"
        tlsCertFile: /var/demi/ssl/ssl.kube_kubelet_server.crt
        tlsPrivateKeyFile: /var/demi/ssl/ssl.kube_kubelet_server.pem
    notify: restart kubelet

  - name: create kubelet service
    copy:
      dest: /etc/systemd/system/kubelet.service
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=containerd.service
        Requires=containerd.service

        [Service]
        ExecStart=/usr/local/bin/kubelet \
          --config=/var/demi/k8s/kubelet.yaml \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \
          --kubeconfig=/var/demi/k8s/kubelet.kubeconfig \
          --register-node=true \
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
    notify: [daemon-reload, restart kubelet]

  # Install iptables for kube-proxy
  - name: install iptables
    package:
      name: iptables
      state: present

  - name: create kube-proxy kubeconfig
    copy:
      dest: /var/demi/k8s/kube-proxy.kubeconfig
      content: |
        apiVersion: v1
        kind: Config
        preferences: {}
        clusters:
        - cluster:
            certificate-authority: /var/demi/ssl/ssl.metal.root_ca_bundle.crt
            server: "https://{{ inventory_hostname }}:6443"
          name: demikube
        contexts:
        - context:
            cluster: demikube
            user: "system:kube-proxy"
          name: default
        current-context: default
        users:
        - name: "system:kube-proxy"
          user:
            client-certificate: /var/demi/ssl/ssl.kube_proxy.crt
            client-key: /var/demi/ssl/ssl.kube_proxy.pem
    notify: restart kube-proxy

  - name: create kube-proxy service
    copy:
      dest: /etc/systemd/system/kube-proxy.service
      content: |
        [Unit]
        Description=Kubernetes Kube Proxy
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-proxy \
          --kubeconfig=/var/demi/k8s/kube-proxy.kubeconfig \
          --proxy-mode=iptables \
          --cluster-cidr=10.200.0.0/16 \
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
    notify: [daemon-reload, restart kube-proxy]

  - name: create demikube-dns kubeconfig
    copy:
      dest: /var/demi/k8s/demikube-dns.kubeconfig
      content: |
        apiVersion: v1
        kind: Config
        preferences: {}
        clusters:
        - cluster:
            certificate-authority: /var/demi/ssl/ssl.metal.root_ca_bundle.crt
            server: "https://{{ inventory_hostname }}:6443"
          name: demikube
        contexts:
        - context:
            cluster: demikube
            user: "system:demikube-dns"
          name: default
        current-context: default
        users:
        - name: "system:demikube-dns"
          user:
            client-certificate: /var/demi/ssl/ssl.demikube_dns.crt
            client-key: /var/demi/ssl/ssl.demikube_dns.pem

  - name: copy demikube-dns
    copy:
      dest: /var/demi/k8s/demikube_dns.py
      src: demikube_dns.py
      mode: "0755"

  - name: install dnsmasq and k8s client
    package:
      name:
        - dnsmasq
        - python3-kubernetes
      state: present

  - name: copy dnsmasq configuration
    copy:
      dest: /etc/dnsmasq.d/kubernetes.conf
      content: |
        # Maintained by demikube-dns.service
        addn-hosts=/etc/hosts.kubernetes
    notify: restart dnsmasq

  - name: create demikube-dns service
    copy:
      dest: /etc/systemd/system/demikube-dns.service
      content: |
        [Unit]
        Description=Demikube DNS
        Requires=dnsmasq.service

        [Service]
        ExecStart=/var/demi/k8s/demikube_dns.py
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
    notify: [daemon-reload, restart demikube-dns]

  # Insecure registry (any pod can push whatever it wants into it)
  # Not a problem for now since no system containers are pulled from here
  - name: add local registry
    blockinfile:
      dest: /etc/containerd/config.toml
      block: |
        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."rk3188.lan"]
        endpoint = ["http://192.168.15.191:5000"]
    notify: restart containerd

  - meta: flush_handlers

  - name: enable k8s worker services
    service:
      name: "{{ item }}"
      enabled: yes
    loop:
      - kubelet
      - kube-proxy
      - demikube-dns
