ssl_certificate /var/demi/certs/demi.ro.crt;
ssl_certificate_key /var/demi/certs/demi.ro.key;

#ssl_protocols TLSv1.2 TLSv1.3;

server {
    listen 443 ssl;
    listen [::]:443 ssl;

    root /var/www/html;

    location /key {

    }

    location / {
	try_files $uri $uri/ =404;
    }
}

# books.demi.ro proxies to the Books share via WebDAV on the NAS
server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name books.demi.ro;

    root /var/www/html;

    location / {
        client_max_body_size 100M;
        proxy_pass http://192.168.15.2:80/Books/;
   }
}

# Cache for nas.demi.ro/check_auth
uwsgi_cache_path /var/cache/nginx.demi.auth levels=1 keys_zone=auth_cache:1m inactive=60m max_size=1m;

# nas.demi.ro proxies to the NAS, but only if authenticated first
# It's password protected by itself, but may have vulnerabilities
server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name nas.demi.ro;

    location = /check_auth {
        internal;
	
        uwsgi_pass unix:///run/uwsgi/app/sso-auth/socket;
	include uwsgi_params;
 	uwsgi_pass_request_body off;

 	uwsgi_cache auth_cache;
 	uwsgi_cache_key "$cookie_auth_key";
    }

    location = /key {
        uwsgi_pass unix:///run/uwsgi/app/sso-auth/socket;
	include uwsgi_params;
    }

    location = /get_cookie {
        uwsgi_pass unix:///run/uwsgi/app/sso-auth/socket;
	include uwsgi_params;
    }

    location = /not-authorized.html {
        root /var/www/html;
    }

    location / {
        auth_request /check_auth;
	error_page 401 = /not-authorized.html;
	proxy_pass http://192.168.15.2:8080;
    }
}

# key.demi.ro provides authentication and authorization via single sign-on
server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name key.demi.ro;

    include uwsgi_params;

    location / {
        uwsgi_pass unix:///run/uwsgi/app/sso-auth/socket;
    }
}
